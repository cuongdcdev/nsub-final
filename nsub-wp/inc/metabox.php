<?php
//nsub post metabox 
/**
 * Generated by the WordPress Meta Box Generator
 * https://jeremyhixon.com/tool/wordpress-meta-box-generator/
 * 
 * Retrieving the values:
 * Lock type = get_post_meta( get_the_ID(), 'nsub-lock-type', true )
 * Custom = get_post_meta( get_the_ID(), 'nsub-custom', true )
 * NFT collection id = get_post_meta( get_the_ID(), 'nsub-nft-collection-id', true )
 * Amount in NEAR = get_post_meta( get_the_ID(), 'nsub-amount-in-near', true )
 */
class Nsub_Post
{
	private $config = '{"title":"Nsub Post","description":"Nsub content lock","prefix":"nsub-","domain":"nsub-post","class_name":"Nsub_Post","post-type":["post"],"context":"side","priority":"core","fields":[{"type":"select","label":"Lock type","default":"Choose content lock type","options":"off:Off - require login with NEAR\r\ninherit:Inherit from category\r\ncustom:Custom","id":"nsub-lock-type"},{"type":"select","label":"Custom","default":"Pay with NEAR","options":"pay:Pay with NEAR\r\nnft:Hold NFT","id":"nsub-custom"},{"type":"text","label":"NFT collection id <br/> <small>(syntax: NFT contract|Id)</small>","id":"nsub-nft-collection-id"},{"type":"number","label":"Amount in NEAR","min":"0","step":"0.01","default":"0.1","id":"nsub-amount-in-near"},{"type":"number","label":"Expired (days) <br/> 0 = unlimited","default" : "0","step":"1","id":"nsub-expired-after"}]}';

	public function __construct()
	{
		$this->config = json_decode($this->config, true);
		add_action('add_meta_boxes', [$this, 'add_meta_boxes']);
		add_action('admin_head', [$this, 'admin_head']);
		add_action('save_post', [$this, 'save_post']);
	}

	public function add_meta_boxes()
	{
		foreach ($this->config['post-type'] as $screen) {
			add_meta_box(
				sanitize_title($this->config['title']),
				$this->config['title'],
				[$this, 'add_meta_box_callback'],
				$screen,
				$this->config['context'],
				$this->config['priority']
			);
		}

		//custom scripts 
		add_action("admin_head", function () {
?>
			<style>
				#nsub-post-wrap label {
					text-align: left;
					font-weight: bold;
					margin-right: 5px;
					display: block;
				}

				/* .c-nsub-nft-collection-id, .c-nsub-amount-in-near, .c-nsub-custom{
                        display: none;
                    } */
			</style>
		<?php
		});

		add_action("admin_footer", function () {
		?>
			<script>
				(($) => {

					$("#nsub-lock-type").on("change", (e) => {

						switch (e.target.value) {
							case "custom":
								$(".c-nsub-custom, .c-nsub-expired-after, .c-nsub-nft-collection-id,.c-nsub-amount-in-near").show("" , "", function(){
									$("#nsub-custom").trigger("change");
								});
								
								break;

							case "off":
								$(".c-nsub-expired-after,.c-nsub-custom, .nsub-cat-form-field.nsub-expired-day.form-field").hide();
								break;

							case "inherit":
								$(".c-nsub-custom, .c-nsub-expired-after").hide();
								break;
						}

					});


					$("#nsub-custom").on("change", (e) => {
						switch (e.target.value) {
							case "pay":
								$(".c-nsub-nft-collection-id").hide();
								$(".c-nsub-amount-in-near").show();
								break;

							case "nft":
								$(".c-nsub-amount-in-near").hide();
								$(".c-nsub-nft-collection-id").show();
								break;
						}
					});

					// $("#nsub-custom").trigger("change");
					// $("#nsub-lock-type").trigger("change");



				})(jQuery);
			</script>
			<?php
		});
	}

	public function admin_head()
	{
		global $typenow;
		if (in_array($typenow, $this->config['post-type'])) {
			?><?php
			}
		}

		public function save_post($post_id)
		{
			$postmeta = [];
			foreach ($this->config['fields'] as $field) {
				switch ($field['type']) {
					default:
						if (isset($_POST[$field['id']])) {
							$sanitized = sanitize_text_field($_POST[$field['id']]);
							update_post_meta($post_id, $field['id'], $sanitized);
							$postmeta[$field["id"]] = $sanitized;
						}
				}
			}
			update_post_meta($post_id, "nsub_post_config", $postmeta);
		}

		public function add_meta_box_callback()
		{
			// echo '<div class="rwp-description">' . $this->config['description'] . '</div>';
			$this->fields_div();
		}

		private function fields_div()
		{
			echo "<div id='nsub-post-wrap'>";
			foreach ($this->config['fields'] as $field) {
				?><div class="nsub-components-base-control <?php echo "c-" . $field['id'] ?>">
				<div class="nsub-components-base-control__field"><?php
																	$this->label($field);
																	$this->field($field);
																	?></div>
			</div><?php
				}
				echo "</div>";
			}

			private function label($field)
			{
				switch ($field['type']) {
					default:
						printf(
							'<label class="components-base-control__label" for="%s">%s</label>',
							$field['id'],
							$field['label']
						);
				}
			}

			private function field($field)
			{
				switch ($field['type']) {
					case 'number':
						$this->input_minmax($field);
						break;
					case 'select':
						$this->select($field);
						break;
					default:
						$this->input($field);
				}
			}

			private function input($field)
			{
				printf(
					'<input class="components-text-control__input %s" id="%s" name="%s" %s type="%s" value="%s">',
					isset($field['class']) ? $field['class'] : '',
					$field['id'],
					$field['id'],
					isset($field['pattern']) ? "pattern='{$field['pattern']}'" : '',
					$field['type'],
					$this->value($field)
				);
			}

			private function input_minmax($field)
			{
				printf(
					'<input class="components-text-control__input" id="%s" %s %s name="%s" %s type="%s" value="%s">',
					$field['id'],
					isset($field['max']) ? "max='{$field['max']}'" : '',
					isset($field['min']) ? "min='{$field['min']}'" : '',
					$field['id'],
					isset($field['step']) ? "step='{$field['step']}'" : '0.001',
					$field['type'],
					$this->value($field)
				);
			}

			private function select($field)
			{
				printf(
					'<select id="%s" name="%s">%s</select>',
					$field['id'],
					$field['id'],
					$this->select_options($field)
				);
			}

			private function select_selected($field, $current)
			{
				$value = $this->value($field);
				if ($value === $current) {
					return 'selected';
				}
				return '';
			}

			private function select_options($field)
			{
				$output = [];
				$options = explode("\r\n", $field['options']);
				$i = 0;
				foreach ($options as $option) {
					$pair = explode(':', $option);
					$pair = array_map('trim', $pair);
					$output[] = sprintf(
						'<option %s value="%s"> %s</option>',
						$this->select_selected($field, $pair[0]),
						$pair[0],
						$pair[1]
					);
					$i++;
				}
				return implode('<br>', $output);
			}

			private function value($field)
			{
				global $post;
				if (metadata_exists('post', $post->ID, $field['id'])) {
					$value = get_post_meta($post->ID, $field['id'], true);
				} else if (isset($field['default'])) {
					$value = $field['default'];
				} else {
					return '';
				}
				return str_replace('\u0027', "'", $value);
			}
		}
		new Nsub_Post;

		//nsub category metabox

		class Nsub_Category_Box
		{
			private $meta_fields = array(
				array(
					'label' => 'Lock type',
					'id' => 'nsub-lock-type',
					'type' => 'select',
					'options' => array(
						'off' => 'Off (require login with NEAR)',
						'pay-near' => 'Pay with NEAR',
						'nft' => 'Hold NFT'
					)
				),

				array(
					'label' => 'NFT collection Id <br/> <small>(syntax: contract|id)</small>',
					'id' => 'nsub-nft-id',
					'type' => 'text',
				),
				array(
					'label' => 'Expired after (day) <br/> <small>0 = unlimited</small>',
					'id' => 'nsub-expired-day',
					'default' => '0',
					'value' => 0,
					'step' => 1,
					'min' => 0,
					'type' => 'number',
				),

				array(
					'label' => 'Amount in NEAR',
					'id' => 'nsub-amount-near',
					'default' => '0.01',
					'step' => '0.01',
					'min' => 0,
					'type' => 'number',
				),


			);
			public function __construct()
			{
				if (is_admin()) {
					add_action('category_add_form_fields', array($this, 'create_fields'), 10, 2);
					add_action('category_edit_form_fields', array($this, 'edit_fields'),  10, 2);
					add_action('created_category', array($this, 'save_fields'), 10, 1);
					add_action('edited_category',  array($this, 'save_fields'), 10, 1);

					add_action("admin_head", function () {
					?>
				<style>
					#nsub-category-wrap {
						background: white;
						border: 1px solid gray;
						border-radius: 15px;
					}

					.nsub-expired-day,
					#nsub-amount-near {
						margin-bottom: 15px;
					}

					#nsub-category-wrap tr th {
						padding-left: 10px !important;
					}

					.nsub-nft-id,
					.nsub-amount-near {
						display: none;
					}
				</style>

			<?php
					});

					add_action("admin_footer", function () {
			?>
				<script>
					(($) => {
						$(document).ready(function() {

							$("#nsub-lock-type").on("change", (e) => {
								$(" .c-nsub-amount-in-near, .c-nsub-nft-collection-id").hide();
								switch (e.target.value) {
									case "off":
										$(".nsub-nft-id, .nsub-amount-near, .nsub-cat-form-field.nsub-expired-day.form-field").hide();
										break;

									case "pay-near":
										$(".nsub-nft-id, .nsub-amount-near").hide();
										$(".nsub-amount-near, .nsub-cat-form-field.nsub-expired-day.form-field").show();
										break;

									case "nft":
										$(".nsub-nft-id, .nsub-amount-near").hide();
										$(".nsub-nft-id, .nsub-cat-form-field.nsub-expired-day.form-field").show();
										break;
								}
							});

							$("#nsub-lock-type").trigger("change");



						});
					})(jQuery);
				</script>
<?php
					});
				}
			}

			public function create_fields($taxonomy)
			{
				$output = '';
				foreach ($this->meta_fields as $meta_field) {
					$label = '<label for="' . $meta_field['id'] . '">' . $meta_field['label'] . '</label>';
					if (empty($meta_value)) {
						if (isset($meta_field['default'])) {
							$meta_value = $meta_field['default'];
						} else {
							$meta_value = "";
						}
					}
					switch ($meta_field['type']) {
						case 'select':
							$input = sprintf(
								'<select id="%s" name="%s">',
								$meta_field['id'],
								$meta_field['id']
							);
							foreach ($meta_field['options'] as $key => $value) {
								$meta_field_value = !is_numeric($key) ? $key : $value;
								$input .= sprintf(
									'<option %s value="%s">%s</option>',
									$meta_value === $meta_field_value ? 'selected' : '',
									$meta_field_value,
									$value
								);
							}
							$input .= '</select>';
							break;

						case 'number':
							$input = sprintf(
								'<input %s id="%s" name="%s" type="%s" value="%s" step="%s" min="%s">',
								$meta_field['type'] !== 'color' ? '' : '',
								$meta_field['id'],
								$meta_field['id'],
								$meta_field['type'],
								$meta_value,
								isset($meta_field['step']) ? $meta_field['step'] : '',
								isset($meta_field['min']) ? $meta_field['min'] : '',
							);
							break;

						default:
							$input = sprintf(
								'<input %s id="%s" name="%s" type="%s" value="%s">',
								$meta_field['type'] !== 'color' ? '' : '',
								$meta_field['id'],
								$meta_field['id'],
								$meta_field['type'],
								$meta_value
							);
					}
					$fid = $meta_field["id"];
					$output .= '<div class="nsub-cat-form-field ' . $fid . '">' . $this->format_rows($label, $input, $fid) . '</div>';
				}
				echo $output;
			}
			public function edit_fields($term, $taxonomy)
			{
				$output = '';
				foreach ($this->meta_fields as $meta_field) {
					$label = '<label for="' . $meta_field['id'] . '">' . $meta_field['label'] . '</label>';
					$meta_value = get_term_meta($term->term_id, $meta_field['id'], true);
					switch ($meta_field['type']) {
						case 'select':
							$input = sprintf(
								'<select id="%s" name="%s">',
								$meta_field['id'],
								$meta_field['id']
							);
							foreach ($meta_field['options'] as $key => $value) {
								$meta_field_value = !is_numeric($key) ? $key : $value;
								$input .= sprintf(
									'<option %s value="%s">%s</option>',
									$meta_value === $meta_field_value ? 'selected' : '',
									$meta_field_value,
									$value
								);
							}
							$input .= '</select>';
							break;

						case 'number':
							$input = sprintf(
								'<input %s id="%s" name="%s" type="%s" value="%s" step="0.01" min="0">',
								$meta_field['type'] !== 'color' ? '' : '',
								$meta_field['id'],
								$meta_field['id'],
								$meta_field['type'],
								$meta_value
							);
							break;

						default:
							$input = sprintf(
								'<input %s id="%s" name="%s" type="%s" value="%s">',
								$meta_field['type'] !== 'color' ? '' : '',
								$meta_field['id'],
								$meta_field['id'],
								$meta_field['type'],
								$meta_value
							);
					}
					$fid = $meta_field["id"];
					$output .= $this->format_rows($label, $input, $fid);
				}
				echo '<tbody id="nsub-category-wrap">' . $output . '</tbody>';
			}
			public function format_rows($label, $input, $fid)
			{
				return '<tr class="nsub-cat-form-field ' . $fid . ' form-field"><th>' . $label . '</th><td>' . $input . '</td></tr>';
			}
			public function save_fields($term_id)
			{
				foreach ($this->meta_fields as $meta_field) {
					if (isset($_POST[$meta_field['id']])) {
						switch ($meta_field['type']) {
							case 'email':
								$_POST[$meta_field['id']] = sanitize_email($_POST[$meta_field['id']]);
								break;
							case 'text':
								$_POST[$meta_field['id']] = sanitize_text_field($_POST[$meta_field['id']]);
								break;
						}
						update_term_meta($term_id, $meta_field['id'], $_POST[$meta_field['id']]);
					} else if ($meta_field['type'] === 'checkbox') {
						update_term_meta($term_id, $meta_field['id'], '0');
					}
				}
			}
		}
		new Nsub_Category_Box;
